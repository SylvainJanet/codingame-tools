plugins {
   id('java')
   alias(libs.plugins.spotless)
}

group 'fr.sylvainjanet'
version '1.0'

repositories {
   mavenCentral()
}
java {
   toolchain {
      languageVersion = JavaLanguageVersion.of(21)
   }
}
sourceSets {
   benchmark {
      java.srcDirs += file("src/benchmark/java")
      resources.srcDirs += file("src/benchmark/resources")
      compileClasspath += main.output
      runtimeClasspath += main.output
   }

}

dependencies {
   testImplementation "org.assertj:assertj-core:3.26.3"
   testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.11.2'
   testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.11.2'
   benchmarkImplementation 'org.openjdk.jmh:jmh-core:1.35'
   benchmarkAnnotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.35'
   benchmarkImplementation 'com.fasterxml.jackson.core:jackson-databind:2.18.0'
}

test {
   useJUnitPlatform()
}

tasks.register('benchmark', JavaExec) {
   dependsOn benchmarkClasses
   mainClass = 'graph.minimumpaths.MinimumPathAlgorithmBenchmark'
   classpath = sourceSets.benchmark.compileClasspath + sourceSets.benchmark.runtimeClasspath
}

classes.finalizedBy(benchmarkClasses)


spotless {
   java {
      removeUnusedImports()
      googleJavaFormat(
            libs.versions.google.java.format
                  .get(),
      ).reflowLongStrings()
      formatAnnotations()
   }
   json {
      target("src/**/*.json", "*.json")
      targetExclude("src/**/generated/**/*.json")
      jackson()
   }
}

tasks.register("format") {
   dependsOn(spotlessApply)
}